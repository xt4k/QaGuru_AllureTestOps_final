plugins {
    id 'java-library'
    id 'application'
    id 'io.qameta.allure' version '2.8.1'
}

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://dl.bintray.com/qameta/maven-unstable/" }
    maven { url "https://github.com/allure-framework/allure2" }
    maven { url "https://github.com/allure-framework/allure-java" }
    mavenCentral()
    mavenLocal()
}

def allureVersion = "2.13.9",
    selenideVersion = "5.20.4",
    junitVersion = "5.8.0-M1",
    appiumVersion = "7.5.1",
    slf4jVersion = "1.7.30",
    ownerVersion = "1.0.12",
    aspectjVersion = "1.9.6",
    raVersion = "4.3.3",
    assertjVer = "3.19.0",
    lombokVersion = "1.18.20",
    fakerVersion = "1.0.2",
    jacksonVersion = "2.12.3"
//,        allureGradleVersion = "2.5"

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    compile("commons-io:commons-io:2.6",
            "io.qameta.allure:allure-java-commons:${allureVersion}",
            "org.junit.jupiter:junit-jupiter-engine:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}")

    testImplementation(
            "org.projectlombok:lombok:${lombokVersion}",
            "com.github.javafaker:javafaker:${fakerVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "org.assertj:assertj-core:${assertjVer}",
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "org.aspectj:aspectjweaver:${aspectjVersion}",
            "com.codeborne:selenide:${selenideVersion}",
            "io.qameta.allure:allure-java-commons:${allureVersion}",
            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "io.qameta.allure:allure-selenide:${allureVersion}",
            "io.appium:java-client:${appiumVersion}",
            "io.rest-assured:rest-assured:${raVersion}",
            "org.aeonbits.owner:owner:${ownerVersion}",
            "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    systemProperty("junit.jupiter.execution.parallel.enabled", "true")
    systemProperty("junit.jupiter.execution.parallel.config.strategy", "dynamic")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")

    useJUnitPlatform()
/*    testLogging {
        lifecycle { events "started", "failed"
               events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"        }    }*/
}

task smoke_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'smoke'
    }
}

task bs_android_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'bs_android'
    }
}

task ios_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'ios'
    }
}

task original_android(type: Test) {
    useJUnitPlatform {
        includeTags 'original_android'
    }
}

task original_ios(type: Test) {
    useJUnitPlatform {
        includeTags 'original_ios'
    }
}

task bs_ios_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'iphone'
    }
}

task emu_android_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'emu_android'
    }
}

task shop_api_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'shop_api'
    }
}

task search_api_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'search_api'
    }
}

task wish_api_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'wish_api'
    }
}

task shop_ui_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'shop_gui'
    }
}

task guru_api_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'qa_guru_api'
    }
}

task guru_gui_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'qa_guru_gui'
    }
}

task api_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'api_testset'
    }
}

task ph_card_api_test(type: Test) {
    useJUnitPlatform {
        includeTags 'physical_card_api_test'
    }
}